diff --git a/Log530Ex1/src/Customer.java b/Log530Ex1/src/Customer.java
index 539312b..8c66b17 100644
--- a/Log530Ex1/src/Customer.java
+++ b/Log530Ex1/src/Customer.java
@@ -1,65 +1,53 @@
-import java.util.Enumeration;
 import java.util.Vector;
 
 
 public class Customer {
-	private String _name;
-	
-	private Vector _rentals = new Vector();
+	private final String _name;	
+	private Vector<Rental> _rentals;
 	
 	public Customer (String name){
+		if ( name == null) {
+		    throw new IllegalArgumentException(
+		      String.format("Parameters can't be null:  name=%s",  name));
+		}
 		_name = name;
+		_rentals = new Vector<Rental>();
 	}
 	
-	public void addRental(Rental arg){
-		_rentals.addElement(arg);
+	public void addRental(Rental rental){
+		if ( rental == null) {
+		    throw new IllegalArgumentException(
+		      String.format("Parameters can't be null:  rental=%s",  rental));
+		}
+		if(_rentals.contains(rental)==false) 
+			_rentals.addElement(rental);
 	}
 	public String getName() {
 		return _name;
 	}
 	
-	public String statement(){
+	public String displayInfos(){
 		double totalAmount = 0;
 		int frequentRenterPoints = 0;
-		Enumeration rentals = _rentals.elements();
 		String result = "Rental Record for " + getName() +"\n";
-		while(rentals.hasMoreElements()){
-			double thisAmount = 0;
-			Rental each = (Rental) rentals.nextElement();
-			
-			//determine amounts for each line
-			switch (each.getMovie().getPriceCode()){
-			case Movie.REGULAR:
-				thisAmount += 2;
-				if(each.getDaysRented() > 2)
-					thisAmount += (each.getDaysRented() - 2)*1.5;
-				break;
-			case Movie.NEW_RELEASE:
-				thisAmount += each.getDaysRented() *3;
-				break;
-			case Movie.CHILDRENS:
-				thisAmount += 1.5;
-				if(each.getDaysRented() > 3)
-					thisAmount += (each.getDaysRented() - 3) *1.5;
-				break;
-			}
+		
+		for(Rental each : _rentals ){	
+			//determine amounts for each rental
+			double thisAmount = each.calcPoints();
 			
 			// add frequent renter points
-			frequentRenterPoints ++;
-			// add bonus for two day new release rental
-			if((each.getMovie().getPriceCode() == Movie.NEW_RELEASE) && each.getDaysRented() > 1) frequentRenterPoints ++;
-			
+			frequentRenterPoints += each.frequentRenterPoint();
+						
 			//show figures for this rental
-			result += "\t" +each.getMovie().getTitle()+ "\t" + String.valueOf(thisAmount) + "\n";
-			totalAmount += thisAmount;
+			totalAmount += thisAmount;	
 			
+			result += "\t" +each.getMovie().getTitle()+ "\t" + String.valueOf(thisAmount) + "\n";
 		}
-		
-		
 		//add footer lines
 		result += "Amount owed is " + String.valueOf(totalAmount) + "\n";
 		result += "You earned " + String.valueOf(frequentRenterPoints) + "frequent renter points";
 			
 		return result;
 	}
+	
 }
diff --git a/Log530Ex1/src/CustomerTest.java b/Log530Ex1/src/CustomerTest.java
new file mode 100644
index 0000000..b524319
--- /dev/null
+++ b/Log530Ex1/src/CustomerTest.java
@@ -0,0 +1,115 @@
+
+
+import static org.junit.Assert.*;
+
+import org.junit.Before;
+import org.junit.Test;
+
+public class CustomerTest {
+	Customer c0,c1,c2;
+	Rental r0,r1,r2;
+	Movie m0,m1,m2;
+	
+	@Before
+	public void setUp() throws Exception {
+		c0 = new Customer ("Benoit");
+		c1 = new Customer ("Charly");
+		c2 = new Customer ("Max");
+		
+		m0 = new Movie("Matrix", Movie.movieType.REGULAR);
+		m1 = new Movie("Titanic", Movie.movieType.NEW_RELEASE);
+		m2 = new Movie("Jumanji", Movie.movieType.CHILDRENS);
+		
+		r0 = new Rental(m0, 0);
+		r1 = new Rental(m1, 1);
+		r2 = new Rental(m2, 2);
+	}
+
+	//Commented for refactor check
+	@Test(expected = IllegalArgumentException.class) 
+	public void testCustomer() {
+		assertNull(new Customer (null)); // no name should fail
+	}
+
+	@Test(expected = IllegalArgumentException.class) 
+	public void testAddBadRental() {
+		c0.addRental(null);
+	}
+	
+	@Test
+	public void testAddRentalDuplicate() {
+		Customer cbase = new Customer ("Benoit");
+		c0.addRental(r0);
+		cbase.addRental(r0);
+		c0.addRental(r0); //already in there, should discard
+		assertEquals(cbase.displayInfos(), c0.displayInfos());
+	}
+	
+	@Test
+	public void testAddRental() {
+		Customer cbase = new Customer ("Benoit");
+		//Customer cbase = c0.clone();
+		c0.addRental(r1);
+		assertNotEquals(cbase.displayInfos(), c0.displayInfos());
+	}
+	
+
+	@Test
+	public void testGetName() {
+		assertTrue(c0.getName().compareTo("Benoit")==0);
+		assertTrue(c1.getName().compareTo("Charly")==0);
+		assertTrue(c2.getName().compareTo("Max")==0);
+	}
+
+	@Test
+	public void testStatement0() {
+		String stat0 = "Rental Record for Benoit\n"
+						+"Amount owed is 0.0\n"
+						+"You earned 0frequent renter points";
+		String stat1 = c0.displayInfos();
+		//System.out.println("co_stat="+stat1);
+		assertTrue(stat1.compareTo(stat0)==0);
+	}
+	
+	@Test
+	public void testStatement1() {
+		String stat0 = "Rental Record for Benoit\n"
+						+"	Matrix	2.0\n"
+						+"Amount owed is 2.0\n"
+						+"You earned 1frequent renter points";
+		c0.addRental(r0);
+		String stat1 = c0.displayInfos();
+		//System.out.println("co_stat="+stat1);
+		assertTrue(stat1.compareTo(stat0)==0);
+	}
+	
+	@Test
+	public void testStatement2() {
+		String stat0 = "Rental Record for Benoit\n"
+						+"	Matrix	2.0\n"
+						+"	Titanic	3.0\n"
+						+"Amount owed is 5.0\n"
+						+"You earned 2frequent renter points";
+		c0.addRental(r0);
+		c0.addRental(r1);
+		String stat1 = c0.displayInfos();
+		//System.out.println("co_stat="+stat1);
+		assertTrue(stat1.compareTo(stat0)==0);
+	}
+
+	@Test
+	public void testStatement3() {
+		String stat0 = "Rental Record for Benoit\n"
+						+"	Matrix	2.0\n"
+						+"	Titanic	3.0\n"
+						+"	Jumanji	1.5\n"
+						+"Amount owed is 6.5\n"
+						+"You earned 3frequent renter points";
+		c0.addRental(r0);
+		c0.addRental(r1);
+		c0.addRental(r2);
+		String stat1 = c0.displayInfos();
+		//System.out.println("co_stat="+stat1);
+		assertTrue(stat1.compareTo(stat0)==0);		
+	}
+}
diff --git a/Log530Ex1/src/Movie.java b/Log530Ex1/src/Movie.java
index f684284..f724274 100644
--- a/Log530Ex1/src/Movie.java
+++ b/Log530Ex1/src/Movie.java
@@ -1,24 +1,37 @@
 
 public class Movie {
-	public static final int CHILDRENS = 2;
-	public static final int REGULAR = 0;
-	public static final int NEW_RELEASE = 1;
+	public static enum movieType {
+		CHILDRENS,
+		REGULAR,
+		NEW_RELEASE
+	};
 	
-	private String _title;
-	private int _priceCode;
+	private final String _title;
+	private movieType _priceCode;
 	
-	public Movie(String title, int priceCode){
+	public Movie(String title, movieType priceCode){
+		if (title == null || priceCode == null) {
+		    throw new IllegalArgumentException(
+		      String.format("Parameters can't be null: title=%s, priceCode=%s", title, priceCode));
+		}
 		_title = title;
 		_priceCode = priceCode;
 	}
 	
-	public int getPriceCode(){
+	public movieType getPriceCode(){
 		return _priceCode;
 	}
-	public void setPricCode(int arg){
-		_priceCode = arg;
+	
+	public void setPricCode(movieType priceCode){
+		if (priceCode == null) {
+		    throw new IllegalArgumentException(
+		      String.format("Parameters can't be null: priceCode=%s", priceCode));
+		}
+		_priceCode = priceCode;
 	}
+	
 	public String getTitle(){
 		return _title;
 	};
+	
 }
\ No newline at end of file
diff --git a/Log530Ex1/src/MovieTest.java b/Log530Ex1/src/MovieTest.java
new file mode 100644
index 0000000..2cdf545
--- /dev/null
+++ b/Log530Ex1/src/MovieTest.java
@@ -0,0 +1,80 @@
+
+
+import static org.junit.Assert.*;
+
+import org.junit.Before;
+import org.junit.Test;
+
+public class MovieTest {
+	Movie m0;
+	Movie m1;
+	Movie m2;
+
+	@Before
+	public void setUp() throws Exception {
+		m0 = new Movie("Matrix", Movie.movieType.REGULAR);
+		m1 = new Movie("Titanic", Movie.movieType.NEW_RELEASE);
+		m2 = new Movie("Jumanji", Movie.movieType.CHILDRENS);
+	}
+
+	//Commented for refactor check
+	@Test(expected = IllegalArgumentException.class) 
+	public void testMovie0() {
+		assertNull(new Movie("Mad max", null)); //devrait fail bad pricecode !
+	}
+	
+	@Test(expected = IllegalArgumentException.class) 
+	public void testMovie1() {
+		assertNull(new Movie(null, Movie.movieType.REGULAR)); //devrait fail bad title !
+	}
+	
+	@Test(expected = IllegalArgumentException.class) 
+	public void testMovie2() {
+		assertNull(new Movie(null, null)); //devrait fail bad title, pricecode !
+	}
+	
+
+	@Test
+	public void testGetPriceCode0() {
+		assertTrue(m0.getPriceCode()== Movie.movieType.REGULAR);
+	}
+	
+	@Test
+	public void testGetPriceCode1() {
+		assertTrue(m1.getPriceCode()== Movie.movieType.NEW_RELEASE);
+	}
+	
+	@Test
+	public void testGetPriceCode2() {
+		assertTrue(m2.getPriceCode()== Movie.movieType.CHILDRENS);
+	}
+
+	@Test
+	public void testSetPricCode0() {
+		assertTrue(m2.getPriceCode()== Movie.movieType.CHILDRENS);
+		m2.setPricCode( Movie.movieType.NEW_RELEASE );
+		assertTrue(m2.getPriceCode()== Movie.movieType.NEW_RELEASE);
+	}
+	
+	//Commented for refactor check
+	@Test(expected = IllegalArgumentException.class)
+	public void testSetPricCode1() {
+		assertTrue(m2.getPriceCode()==Movie.movieType.CHILDRENS);
+		m2.setPricCode(null);  //bad enum devrait exception
+	}
+	
+
+
+	@Test
+	public void testGetTitle1() {
+		assertTrue(m0.getTitle().compareTo("Matrix")== 0);
+	}
+	
+	@Test
+	public void testGetTitle2() {
+		Movie mstring = new Movie("MadMax\\0Mouahaha", Movie.movieType.CHILDRENS); //test de string escape
+		//System.out.println("mstring title="+mstring.getTitle()+" len="+mstring.getTitle().length());
+		assertTrue(mstring.getTitle().length()==16);
+	}
+
+}
diff --git a/Log530Ex1/src/Rental.java b/Log530Ex1/src/Rental.java
index 913f116..f0eeade 100644
--- a/Log530Ex1/src/Rental.java
+++ b/Log530Ex1/src/Rental.java
@@ -1,9 +1,13 @@
 
 class Rental {
-	private Movie _movie;	
-	private int _daysRented;
+	private final Movie _movie;	
+	private final int _daysRented;
 	
 	public Rental(Movie movie, int daysRented){
+		if (movie == null || daysRented < 0) {
+		    throw new IllegalArgumentException(
+		      String.format("Parameters can't be null or below 0: movie=%s, daysRented=%s", movie, daysRented));
+		}
 		_movie = movie;
 		_daysRented = daysRented;
 	}	
@@ -11,7 +15,36 @@ class Rental {
 	public int getDaysRented() {
 		return _daysRented;
 	}
+	
 	public Movie getMovie() {
 		return _movie;
-	}	
+	}
+	
+	public double calcPoints(){
+		double amount = 0.0;
+		switch (_movie.getPriceCode()){
+			case REGULAR:
+				amount += 2;
+				if(_daysRented > 2)
+					amount += (_daysRented - 2)*1.5;
+				break;
+			case NEW_RELEASE:
+				amount += _daysRented *3;
+				break;
+			case CHILDRENS:
+				amount += 1.5;
+				if(_daysRented > 3)
+					amount += (_daysRented - 3) *1.5;
+				break;
+		}
+		return amount;
+	}
+	
+	public int frequentRenterPoint(){
+		int frequentRenterPoints=1;
+		if((_movie.getPriceCode() == Movie.movieType.NEW_RELEASE) && _daysRented > 1) 
+			frequentRenterPoints++;
+		
+		return frequentRenterPoints;
+	}
 }
diff --git a/Log530Ex1/src/RentalTest.java b/Log530Ex1/src/RentalTest.java
new file mode 100644
index 0000000..4bb708f
--- /dev/null
+++ b/Log530Ex1/src/RentalTest.java
@@ -0,0 +1,57 @@
+
+
+import static org.junit.Assert.*;
+
+import org.junit.Before;
+import org.junit.Test;
+
+public class RentalTest {
+	Rental r0,r1,r2;
+	Movie m0,m1,m2;
+	
+	@Before
+	public void setUp() throws Exception {
+		m0 = new Movie("Matrix", Movie.movieType.REGULAR);
+		m1 = new Movie("Titanic", Movie.movieType.NEW_RELEASE);
+		m2 = new Movie("Jumanji", Movie.movieType.CHILDRENS);
+
+		r0 = new Rental(m0, 0);
+		r1 = new Rental(m1, 1);
+		r2 = new Rental(m2, 2);
+	}
+
+	@Test(expected = IllegalArgumentException.class) 
+	public void testRental0() {
+		assertNull(new Rental(null, 0)); //devrait fail bad movie
+	}
+	
+	@Test(expected = IllegalArgumentException.class) 
+	public void testRental1() {
+		assertNull(new Rental(null, -1)); //devrait fail bad movie and daynum
+	}
+	
+	@Test(expected = IllegalArgumentException.class) 
+	public void testRental2() {
+		assertNull(new Rental(m0, -1)); //devrait fail bad   daynum
+	}
+	
+	@Test
+	public void testRentalOk() {
+		assertNotNull(r0);
+	}
+
+	@Test
+	public void testGetDaysRented() {
+		assertTrue(r0.getDaysRented()==0);
+		assertTrue(r1.getDaysRented()==1);
+		assertTrue(r2.getDaysRented()==2);
+	}
+
+	@Test
+	public void testGetMovie() {
+		assertTrue(r0.getMovie() == m0);
+		assertTrue(r1.getMovie() == m1);
+		assertTrue(r2.getMovie() == m2);
+	}
+
+}
