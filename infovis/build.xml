<!-- ===========================================================================

Installing the build tools
==========================

The Infovis build system is based on Apache Ant, which is a Java building tool
originally developed for the Jakarta Tomcat project but now used in many other
Apache projects and extended by many developers.

Ant is a little but very handy tool that uses a build file written in XML
(this file) as building instructions. For more information refer to
"http://ant.apache.org/".

The only thing that you have to make sure of is that the "JAVA_HOME" environment
property is set to match the top level directory containing the JVM you want
to use. For example:

C:\> set JAVA_HOME=C:\jdk1.4

or on Unix:

% setenv JAVA_HOME /usr/local/java
  (csh)
> JAVA_HOME=/usr/java; export JAVA_HOME
  (ksh, bash)

That's it!

Building instructions
=====================

Ok, let's build the samples. First, make sure your current working directory is
where this very file is located. Then type:

  ./build.sh all (unix)
  .\build.bat all (win32)

To build the framework, examples, and tests or:

  ./build.sh (unix)
  .\build.bat (win32)
  
To list all the possible build targets.

If everything is right (see *) and all the required packages are visible, this action
will generate some jar files:

  infovis.jar  - This jar contains the Infovis Toolkit.
  examples.jar - This jar contains simple examples of the Infovis Toolkit.
  tests.jar    - This jar contains unit tests for classes in the Infovis Toolkit.

in the "./build" directory. These jar files (excluding infovis.jar wich is a library) can all
be run by double clicking with the mouse on the jar file or by running the command

  java -jar <jar file name>

from within the ./build directory. Some of the jars depend on others and on files
in ./lib so the distributions file structure should not be changed without repackaging
the jars to remove these dependencies.

* On Win/98 you may get an "Out of Environment Space" error message. This happens if
Windows provides too small a space for environment variables. To work around this
limitation: 
  Close the DOS window (the error can corrupt its CLASSPATH variable). 
  Open a new DOS window. Click on the MS-DOS icon at the top left of the window. 
  Select the Properties option. 
  Click on the Memory tab. 
  Adjust the "Initial Environment" drop-down box from "Auto" to "2816". 
  Click OK. 
Then try building.

-->

<project name="Infovis" default="usage" basedir=".">

 <!-- =================================================================== -->
 <!-- Initialization target                                               -->
 <!-- =================================================================== -->
 <target name="init">
  <tstamp/>
  <property name="Name" value="Infovis"/>
  <property name="name" value="infovis"/>
  <property name="version" value="0.9beta2"/>
  <property name="year" value="2006"/>

  <echo message="----------- ${Name} ${version} [${year}] ------------"/>

  <property name="build.compiler" value="modern"/>
  <property name="debug" value="off"/>
  <property name="optimize" value="on"/>
  <property name="deprecation" value="on"/>
  <property name="packages" value="infovis.*"/>

  <!-- Define the source directories -->
  <property name="root.dir" value="."/>
  <property name="doc.dir" value="${root.dir}/doc"/>
  <property name="lib.dir" value="${root.dir}/lib"/>
  <property name="src.dir" value="${root.dir}/src"/>
  <property name="examples.dir" value="${root.dir}/examples"/>
  <property name="tests.dir" value="${root.dir}/tests"/>

  <!-- Define the source build directories -->
  <property name="doc.apidocs" value="${doc.dir}/api"/>
  <property name="build.dir" value="${root.dir}/build"/>
  <property name="build.lib" value="${root.dir}/build/lib"/>
  <property name="build.infovis.src" value="${root.dir}/build/infovis/src"/>
  <property name="build.infovis.dest" value="${root.dir}/build/infovis/classes"/>
  <property name="build.examples.src" value="${root.dir}/build/examples/src"/>
  <property name="build.examples.dest" value="${root.dir}/build/examples/classes"/>
  <property name="build.tests.src" value="${root.dir}/build/tests/src"/>
  <property name="build.tests.dest" value="${root.dir}/build/tests/classes"/>

  <!-- Define the distribution directories -->
  <property name="dist.root" value="${root.dir}/dist"/>
  <property name="sourcedist.dir" value="${dist.root}/${name}-${version}/${name}-${version}"/>

  <path id="build-classpath">
  	<fileset dir="${build.lib}">
  		<include name="*.jar"/>
  	</fileset>
	<pathelement location="${build.dir}/${name}.jar"/>
  </path>

   <path id="run-classpath">
     <fileset dir="${lib.dir}">
       <include name="*.jar"/>
     </fileset>      	
  </path>

 </target>

 <!-- =================================================================== -->
 <!-- Help on usage                                                       -->
 <!-- =================================================================== -->
 <target name="usage">
  <echo message=""/>
  <echo message=""/>
  <echo message="Infovis Build file"/>
  <echo message="-------------------------------------------------------------"/>
  <echo message=""/>
  <echo message=" available targets are:"/>
  <echo message=""/>
  <echo message="   all        --> builds all the jars in ./build"/>
  <echo message="   factories  --> create the properties file in src/infovis"/>
  <echo message="   infovis    --> builds the infovis.jar file in ./build"/>
  <echo message="   examples   --> builds the examples.jar file in ./build"/>
  <echo message="   tests      --> builds the tests.jar file in ./build"/>
  <echo message="   runtests   --> Runs the test cases in ./build/tests.jar"/>
  <echo message="   compiledist--> creates the compiled distribution in ./dist"/>
  <echo message="   sourcedist --> creates the source distribution in ./dist"/>    
  <echo message="   api        --> generates the Infovis Toolkit  documentation in ./doc/api"/>
  <echo message="   clean      --> restores distribution to original state"/>
  <echo message="   usage      --> (default) displays build menu"/>
  <echo message=""/>
  <echo message=" See the comments inside the build.xml file for more details."/>
  <echo message="-------------------------------------------------------------"/>
  <echo message=""/>
  <echo message=""/>
 </target>

 <!-- =================================================================== -->
 <!-- Prepares the build directory                                        -->
 <!-- =================================================================== -->
 <target name="prepare" depends="init">
  <mkdir dir="${build.dir}"/>
  <mkdir dir="${build.lib}"/>
  
  <copy todir="${build.lib}">
   <fileset dir="${lib.dir}"/>
  </copy>
  
 </target>
 
 <!-- =================================================================== -->
 <!-- Prepares the infovis source code                                    -->
 <!-- =================================================================== -->
 <target name="prepare-infovis" depends="prepare">
  <mkdir dir="${build.infovis.src}"/>
  <mkdir dir="${build.infovis.dest}"/>
  
  <copy todir="${build.infovis.src}">
   <fileset dir="${src.dir}"/>
  </copy>
<!--
  <copy todir="${build.infovis.src}">
   <fileset dir="${src.dir}">
    <include name="*.html"/>
   </fileset>
  </copy>
-->
  
 </target>

 <!-- =================================================================== -->
 <!-- Prepares the examples code                                              -->
 <!-- =================================================================== -->
 <target name="prepare-examples" depends="prepare">
  <mkdir dir="${build.examples.src}"/>
  <mkdir dir="${build.examples.dest}"/>
  
  <copy todir="${build.examples.src}">
   <fileset dir="${examples.dir}"/>
  </copy>
        
 </target>

 <!-- =================================================================== -->
 <!-- Prepares the test code                                              -->
 <!-- =================================================================== -->
 <target name="prepare-tests" depends="prepare">
  <mkdir dir="${build.tests.src}"/>
  <mkdir dir="${build.tests.dest}"/>

  <copy todir="${build.tests.src}">
   <fileset dir="${tests.dir}"/>
  </copy>
 </target>


 <!-- =================================================================== -->
 <!-- Compiles the Infovis source code                                    -->
 <!-- =================================================================== -->
 <target name="compile-infovis" depends="prepare-infovis">
  <!-- copy resource files -->
  <copy todir="${build.infovis.dest}">
   <fileset dir="${build.infovis.src}" excludes="**/*.java"/>
  </copy>
  <javac srcdir="${build.infovis.src}"
   source="1.4"
   destdir="${build.infovis.dest}"
   debug="${debug}"
   deprecation="${deprecation}"
   optimize="${optimize}"
   classpathref="build-classpath"/>
 </target>


 <!-- =================================================================== -->
 <!-- Compiles the examples directory                                        -->
 <!-- =================================================================== -->
 <target name="compile-examples" depends="prepare-examples">
  <!-- copy resource files -->
  <copy todir="${build.examples.dest}">
   <fileset dir="${build.examples.src}" excludes="**/*.java"/>
  </copy>
  <javac srcdir="${build.examples.src}"
   destdir="${build.examples.dest}"
   source="1.4"
   debug="${debug}"
   deprecation="${deprecation}"
   optimize="${optimize}"
   classpathref="build-classpath"/>
 </target>
 
 <!-- =================================================================== -->
 <!-- Compiles the tests directory                                        -->
 <!-- =================================================================== -->
 <target name="compile-tests" depends="prepare-tests, infovis">
  <!-- copy resource files -->
<!-- 	
  <copy todir="${build.tests.dest}">
   <fileset dir="${build.tests.src}" excludes="**/*.java"/>
  </copy>
-->
  <javac srcdir="${build.tests.src}"
   destdir="${build.tests.dest}"
   debug="${debug}"
   deprecation="${deprecation}"
   optimize="${optimize}"
   classpathref="build-classpath"/>
 </target>

 <!-- =================================================================== -->
 <!-- Creates the infovis.jar in ./build                                  -->
 <!-- =================================================================== -->
 <target name="infovis" depends="compile-infovis">
  <jar jarfile="${build.dir}/${name}.jar"
   basedir="${build.infovis.dest}"
   includes="**"
   manifest="${build.infovis.src}/infovis.mf"/>
 </target>

 <!-- =================================================================== -->
 <!-- Creates the examples.jar in ./build                                    -->
 <!-- =================================================================== -->
 <target name="examples" depends="compile-examples">
  <jar jarfile="${build.dir}/examples.jar"
   basedir="${build.examples.dest}"
   manifest="${build.examples.src}/examples.mf"
   includes="**"/>
 </target>

 <!-- =================================================================== -->
 <!-- Creates the tests.jar in ./build                                    -->
 <!-- =================================================================== -->
 <target name="tests" depends="compile-tests">
  <jar jarfile="${build.dir}/tests.jar"
   basedir="${build.tests.dest}"
   manifest="${build.tests.src}/tests.mf"
   includes="**"/>
 </target>

 <!-- =================================================================== -->
 <!-- Run the test cases                                                  -->
 <!-- =================================================================== -->
 <target name="runtests" depends="tests">
  <java fork="yes" classname="junit.textui.TestRunner" taskname="junit" failonerror="true">
   <arg value="RunAllUnitTests"/>
   <classpath>
    <pathelement location="${build.dir}/${name}.jar"/>
    <pathelement location="${build.dir}/tests.jar"/>
    <pathelement location="${build.lib}/colt.jar"/>
    <pathelement path="" />
    <pathelement path="${java.class.path}" />
   </classpath>
  </java>
 </target>

 <!-- =================================================================== -->
 <!-- Build all jars in ./build                                           -->
 <!-- =================================================================== -->
 <target name="all" depends="infovis, examples, tests, runtests"/>

 <!-- =================================================================== -->
 <!-- Creates the API documentation in ./doc/api/                     -->
 <!-- =================================================================== -->
 <target name="api" depends="init">
  <mkdir dir="${doc.apidocs}"/>
  <javadoc packagenames="${packages}"
   overview="src/overview.html"
   sourcepath="${src.dir}"
   destdir="${doc.apidocs}"
   author="true"
   public="true"
   additionalparam="-source 1.4"
   version="true"
   use="true"
   splitindex="true"
   noindex="false"
   windowtitle="The ${Name} Toolkit"
   doctitle="The ${Name} Toolkit"
   bottom="Copyright &#169; ${year} by Jean-Daniel Fekete and INRIA, France All rights reserved."
  	classpathref="run-classpath">
  	<link href="http://java.sun.com/j2se/1.4/docs/api"/>
	<link href="http://dsd.lbl.gov/~hoschek/colt/api"/>
  	<tag name="infovis.factory" scope="all" description="InfoVis factory arguments:" />
  </javadoc>
  </target>

 <!-- =================================================================== -->
 <!-- Creates the Factories from documentation                            -->
 <!-- =================================================================== -->
 <target name="factories" depends="init">
  <javac srcdir="tools"
   source="1.4"
   destdir="class"
   debug="${debug}"
   deprecation="${deprecation}"
   optimize="${optimize}">
   <classpath>
    <fileset dir="${java.home}/lib">
     <include name="tools.jar"/>
    </fileset>    
   </classpath>
  </javac>

  <javadoc packagenames="${packages}"
   sourcepath="${src.dir}"
   author="true"
   public="true"
   additionalparam="-source 1.4"
   version="true"
   noindex="false"
   classpathref="run-classpath"
   >
   <doclet name="FactoryPropertiesGenerator" path="class"/>
  </javadoc>
  </target>

 <!-- =================================================================== -->
 <!-- Build source distribution in ./dist                                 -->
 <!-- =================================================================== -->
 <target name="sourcedist" depends="clean">
  <mkdir dir="${dist.root}"/>
  <mkdir dir="${sourcedist.dir}"/>

  <copy todir="${sourcedist.dir}">
   <fileset dir="${root.dir}">
    <exclude name="class/**"/>
    <exclude name="dist/**"/>
    <exclude name="build/**"/>
   	<!--
    <exclude name="data/**"/>
    <exclude name="lib/**"/>
    -->
   </fileset>
  </copy>

  <fixcrlf srcdir="${sourcedist.dir}"
   eol="lf" eof="remove"
   includes="**/*.sh"
   />
  <zip zipfile="${dist.root}/${name}-${version}.zip"
   basedir="${dist.root}/${name}-${version}"
   whenempty="create"/>
 </target>

 <!-- =================================================================== -->
 <!-- Build compiled distribution in ./dist                               -->
 <!-- =================================================================== -->
 <target name="compiledist" depends="clean, all, api">
  <mkdir dir="${dist.root}"/>
  <mkdir dir="${sourcedist.dir}"/>

  <copy todir="${sourcedist.dir}">
   <fileset dir="${root.dir}">
    <exclude name="dist/**"/>
    <exclude name="src/**"/>
   	<exclude name="class/**"/>
   	<exclude name="build/**"/>
   	<!--
    <exclude name="data/**"/>
    <exclude name="lib/**"/>
    -->
    <exclude name="examples/**"/>
    <exclude name="tests/**"/>
   </fileset>
  </copy>
  <copy todir="${sourcedist.dir}">
    <fileset dir="${root.dir}/build">
	  	<include name="*.jar"/>
  	</fileset>
  </copy>

  <fixcrlf srcdir="${sourcedist.dir}"
   eol="lf" eof="remove"
   includes="**/*.sh"
   />

  <zip zipfile="${dist.root}/${name}-${version}-compiled.zip"
   basedir="${dist.root}/${name}-${version}"
   whenempty="create"
   />

 </target>

 <!-- =================================================================== -->
 <!-- Build source distribution in ./dist                                 -->
 <!-- =================================================================== -->
<!--
 <target name="datadist" depends="clean">
  <mkdir dir="${dist.root}"/>
  <mkdir dir="${sourcedist.dir}"/>

  <copy todir="${sourcedist.dir}">
   <fileset dir="${root.dir}" includes="data/**" excludes="dist/**"/>
  </copy>
  <delete dir="${sourcedist.dir}/dist"/>

  <zip zipfile="${dist.root}/${name}-${version}-data.zip"
   basedir="${dist.root}/${name}-${version}"
   whenempty="create"/>
 </target>
 -->

 <!-- =================================================================== -->
 <!-- Build lib distribution in ./dist                                 -->
 <!-- =================================================================== -->
<!--
 <target name="libdist" depends="clean">
  <mkdir dir="${dist.root}"/>
  <mkdir dir="${sourcedist.dir}"/>

  <copy todir="${sourcedist.dir}">
   <fileset dir="${root.dir}" includes="lib/**" excludes="dist/**"/>
  </copy>

  <zip zipfile="${dist.root}/${name}-${version}-lib.zip"
   basedir="${dist.root}/${name}-${version}"
   whenempty="create"/>
 </target>
-->
 <!-- =================================================================== -->
 <!-- Clean restors distribution to original state                        -->
 <!-- =================================================================== -->
 <target name="clean" depends="init">
  <delete dir="${build.dir}"/>
  <delete dir="${dist.root}"/>
  <delete dir="${doc.apidocs}"/>
 </target>
</project>
